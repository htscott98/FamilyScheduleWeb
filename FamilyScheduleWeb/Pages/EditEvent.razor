@page "/EditEvent/{eventID}"
@using System.Data;
@inject NavigationManager navigate

<h2 class="mb-3">Edit Event</h2>

<div class="mb-3">

    <div class="row">
        <div class="form-group col-md-3 mt-3">
            <label><span style="color: red; font-weight: 700;">*</span> Child</label>
            <select class="form-select" @bind="Child">
                <option selected disabled>Select...</option>
                <option>Kingston</option>
                <option>Zander</option>
            </select>
        </div>
        <div class="form-group col-md-3 mt-3">
            <label><span style="color: red; font-weight: 700;">*</span> Sport</label>
            <select class="form-select" @bind="Sport">
                <option selected disabled>Select...</option>
                <option>Basketball</option>
                <option>Baseball</option>
                <option>Football</option>
                <option>Soccer</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-3 mt-3">
            <label><span style="color: red; font-weight: 700;">*</span> Date</label>
            <input type="date" class="form-control" @bind="Date" />
        </div>
        <div class="form-group col-md-3 mt-3">
            <label><span style="color: red; font-weight: 700;">*</span> Start Time</label>
            <input type="time" class="form-control" @bind="StartTime" />
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-3 mt-3">
            <label>Location</label>
            <input type="text" class="form-control" @bind="Location" />
        </div>
        <div class="form-group col-md-3 mt-3">
            <label>Address</label>
            <input type="text" class="form-control" @bind="Address" />
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-3 mt-3">
            <button class="btn btn-danger" onclick="@Delete">Delete</button>
            <button class="btn" style="background-color:#ED702E; color:white;" onclick="@Submit">Update</button>
        </div>
    </div>
    <div class="alert @AlertType mt-3" role="alert" hidden="@AlertHide">
        @AlertText

        @{
        if(@AlertType == "alert-success")
        {
            <br><a href="" class="btn btn-link">View Schedule</a>
        }

        }

    </div>

</div>


@code {

    [Parameter]
    public string eventID { get; set; }

    private string Child;
    private string Sport;
    private DateTime Date = DateTime.Now;
    private DateTime StartTime;
    private string Location;
    private string Address;

    private string AlertText;
    private string AlertType;
    private bool AlertHide;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(eventID))
        {
            navigate.NavigateTo("", true);
            return;
        }

        string sql = "SELECT EventOwner, EventSport, EventDate, EventStartTime, EventLocation, EventAddress, Enabled, SubmittedDateTime " +
        "FROM FamilySchedule_Events WHERE ID = '" + eventID + "'";

        DataTable dt = Execute.ExecuteSelectReturnDT(Connection.InitDBConnection(), sql);

        if (dt != null && dt.Rows.Count > 0)
        {
            foreach (DataRow row in dt.Rows)
            {
                Child = row["EventOwner"].ToString();
                Sport = row["EventSport"].ToString();
                Date = Convert.ToDateTime(row["EventDate"]);
                StartTime = Convert.ToDateTime(row["EventStartTime"]);
                Location = row["EventLocation"].ToString();
                Address = row["EventAddress"].ToString();
            }
        }
    }

    private void Submit()
    {
        try
        {
            AlertText = "";
            AlertHide = true;


            if (string.IsNullOrEmpty(Child))
            {
                AlertText = "Verify you have selected the child for which the event is for.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

            if (string.IsNullOrEmpty(Sport))
            {
                AlertText = "Verify you have selected the sport for which the event is for.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

            if (string.IsNullOrEmpty(Date.ToString()))
            {
                AlertText = "Verify you have selected the date for the event.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

            if (string.IsNullOrEmpty(StartTime.ToString()))
            {
                AlertText = "Verify you have selected the start time for the event.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

            if (string.IsNullOrEmpty(Location))
            {
                Location = "";
            }

            if (string.IsNullOrEmpty(Address))
            {
                Address = "";
            }

            string sql = "UPDATE FamilySchedule_Events SET EventOwner = '" + Child + "', EventSport = '" + Sport + "', EventDate = '" + Date.ToShortDateString() + "', EventStartTime = '" + StartTime.ToShortTimeString() + "', " +
            "EventLocation = '" + Location + "', EventAddress = '" + Address + "' WHERE ID = '" + eventID + "'";

            if (Execute.ExecuteStatementReturnBool(Connection.InitDBConnection(), sql) == true)
            {
                navigate.NavigateTo("", true);
                return;
            }
            else
            {
                AlertText = "Failed to update data. Try again or contact the developer.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

        }
        catch (Exception ex)
        {
            AlertText = "An unexpected error occurred. Try again or contact the developer.";
            AlertHide = false;
            AlertType = "alert-danger";
            return;
        }
    }

    private void Delete()
    {
        try
        {
            if (string.IsNullOrEmpty(eventID))
            {
                return;
            }

            string sql = "DELETE FROM FamilySchedule_Events WHERE ID = '" + eventID + "'";

            bool deleted = Execute.ExecuteStatementReturnBool(Connection.InitDBConnection(), sql);

            if (deleted == true)
            {
                navigate.NavigateTo("", true);
                return;
            }
            else
            {
                AlertText = "Failed to delete data. Try again or contact the developer.";
                AlertHide = false;
                AlertType = "alert-danger";
                return;
            }

        }
        catch (Exception ex)
        {
            AlertText = "An unexpected error occurred. Try again or contact the developer.";
            AlertHide = false;
            AlertType = "alert-danger";
            return;
        }
    }

}